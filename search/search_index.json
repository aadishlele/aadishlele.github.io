{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my website","text":""},{"location":"#hello-i-am-aadish-lele","title":"Hello, I am Aadish Lele","text":"<p>I am part of Team 309A in EGR 314. Our main porject is making a spinning top that will change direction based upon temperature values. When the temperature increases beyond a certain threshold, the spinning top motor will change the direction and move counter clockwise. This system is designed to inspire K-12 students to learn and understand how sensor values changes the way actuators function.</p> <p>This is the Team Website: Team 309A Website Link</p> <p>Team Members and their webites:    - Aadish Website - Actuator  - Shaurya Website - Sensor</p> <p>Preperation Date: January 16  </p> <p>Spring 2025  </p> <p>Arizona State University  EGR 314, Prof. Nichols</p>"},{"location":"Application%20Programming%20Interface%20%28API%29/","title":"API","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#user-id-assignments","title":"User ID Assignments","text":"User User ID Aadish A Shaurya S"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-structure","title":"Message Structure","text":"Byte # Field Name Data Type Description 1-2 Prefix <code>uint16_t</code> Message start identifier 3 Sender ID <code>uint8_t</code> Identifies who sent the message 4 Receiver ID <code>uint8_t</code> Identifies who should receive the message 5-6 Data <code>uint16_t</code> Message-specific data 7-8 Suffix <code>uint16_t</code> Message end identifier"},{"location":"Application%20Programming%20Interface%20%28API%29/#messages-my-subsystem-sends-receives","title":"Messages My Subsystem Sends &amp; Receives","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#message-type-1-motor-direction-command","title":"Message Type 1 \u2013 Motor Direction Command","text":"Byte Variable Name Data Type Min Value Max Value Example 1-2 <code>prefix</code> <code>uint16_t</code> 0x0001 0x0001 0x0001 3 <code>sender_id</code> <code>uint8_t</code> 0xFF 0xFF 0xFF 4 <code>receiver_id</code> <code>uint8_t</code> 0xFD 0xFD 0xFD 5-6 <code>motor_direction</code> <code>uint16_t</code> 0x40 (Forward) 0x41 (Reverse) 0x40 7-8 <code>suffix</code> <code>uint16_t</code> 0x0020 0x0020 0x0020 <p>Function: Commands Aadish to change motor direction.</p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-type-2-acknowledgement","title":"Message Type 2 \u2013 Acknowledgement","text":"Byte Variable Name Data Type Min Value Max Value Example 1-2 <code>prefix</code> <code>uint16_t</code> 0x0002 0x0002 0x0002 3 <code>sender_id</code> <code>uint8_t</code> 0xFC 0xFC 0xFC 4 <code>receiver_id</code> <code>uint8_t</code> 0xFD 0xFD 0xFD 5-6 <code>motor_speed</code> <code>uint16_t</code> 0x42 (Increase) 0x43 (Decrease) 0x42 7-8 <code>suffix</code> <code>uint16_t</code> 0x0021 0x0021 0x0021 <p>Function: Updates the motor speed in Aadish\u2019s motor driver system.</p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-handling-code","title":"Message Handling Code","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#include-mcc_generated_filesmcch","title":"include \"mcc_generated_files/mcc.h\"","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#include-mcc_generated_filesspi1h","title":"include \"mcc_generated_files/spi1.h\"","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#define-my_id-a","title":"define MY_ID 'A'","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#define-fwd_cmd-0b11101111","title":"define FWD_CMD 0b11101111","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#define-rev_cmd-0b11101101","title":"define REV_CMD 0b11101101","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#define-off_cmd-0b11100000","title":"define OFF_CMD 0b11100000","text":"<p>void send_uart_message(const char* msg) {     for (uint8_t i = 0; i &lt; 8; i++) {         while (!EUSART1_is_tx_ready());         EUSART1_Write(msg[i]);     } }</p> <p>void send_confirmation(char action) {     char msg[8] = { 'F', 'S', 'A', 'S', '0', action, 'F', 'S' };     send_uart_message(msg); }</p> <p>void main(void) {     SYSTEM_Initialize();     SPI1_Open(SPI1_DEFAULT);     CS_SetHigh();     __delay_ms(500);</p> <pre><code>char rx_buf[8] = {0};\n\nwhile (1)\n{\n    if (EUSART1_is_rx_ready()) {\n        char byte = EUSART1_Read();\n\n        for (uint8_t i = 0; i &lt; 7; i++) rx_buf[i] = rx_buf[i + 1];\n        rx_buf[7] = byte;\n\n        if (rx_buf[0] == 'F' &amp;&amp; rx_buf[1] == 'S' &amp;&amp;\n            rx_buf[2] == 'S' &amp;&amp; rx_buf[3] == 'A' &amp;&amp;\n            rx_buf[4] == '0' &amp;&amp; rx_buf[6] == 'F' &amp;&amp; rx_buf[7] == 'S') {\n\n            char cmd = rx_buf[5];\n\n            if (cmd == '1') {\n                CS_SetLow(); SPI1_ExchangeByte(FWD_CMD); CS_SetHigh();\n            } else if (cmd == '2') {\n                CS_SetLow(); SPI1_ExchangeByte(REV_CMD); CS_SetHigh();\n            } else if (cmd == '3') {\n                CS_SetLow(); SPI1_ExchangeByte(OFF_CMD); CS_SetHigh();\n            }\n\n            send_confirmation(cmd); // Send reply to S\n        }\n    }\n}\n</code></pre> <p>}</p>"},{"location":"Bill%20Of%20Materials/","title":"Bill Of Materials","text":"<p>Aadish Lele</p> <p>Individual Bill of Materials </p> <p>Indidvidual Bill of Materials bom.xlsx</p>"},{"location":"Individual%20Block%20Diagram/","title":"Individual Block Diagram","text":""},{"location":"Individual%20Block%20Diagram/#individual-block-diagram","title":"Individual Block Diagram","text":"<p>EGR314 Individual Block Diagram  </p> <p>EGR314 Individual Block Diagram PDF: BLOCKDIAGRAM.pdf</p>"},{"location":"Individual%20Block%20Diagram/#selection-process-and-explaination","title":"Selection process and explaination","text":"<p>The Motor Driver PCB block diagram is organized into three primary sections: Connections, Motor Driver, and the PIC18F47Q10 Microcontroller.  </p> <p>Motor Driver Section: This component features two output pins that connect directly to the motor, enabling directional control. It also includes two SPI communication pins that  interface with the PIC microcontroller for receiving control commands.  </p> <p>PIC18F47Q10 Microcontroller Section: The PIC18F47Q10 is responsible for controlling the motor via SPI communication. It connects to the motor driver through four SPI pins: - CSN (Chip Select) - SCK (Serial Clock) - SI (Serial Input) - SO (Serial Output)  </p> <p>Additionally, the PIC has two UART pins: -  RX (Receiver) connected to the Connector IN via ribbon cable -  TX (Transmitter) connected to the Connector OUT via ribbon cable  </p> <p>Connections Section: This section contains the ribbon cable interfaces for UART communication. The RX pin receives incoming data via the Connector IN, and the TX pin sends outgoing data via the Connector OUT.  </p> <p>The block diagram was designed by first identifying and separating the core components, then listing all relevant pins for each. Once the interconnections between components were finalized, the diagram was completed to reflect the full communication and control pathways.  </p>"},{"location":"Individual%20Component%20Selection/","title":"Individual Component Selection","text":"<p>Professor Nichols</p> <p>Subsystem: Motor Driver</p> <ol> <li>Motor Driver</li> </ol> No. Solution Pros Cons 1  Option 1: IFX9201SGAUMA1  Infineon Technology Price: $3.68/unit Option Link Datasheet Link The IFX9201SGAUMA1 offers great protection mechanisms, including over-temperature shutdown, and undervoltage lockout. The driver can operate at PWM frequencies up to 20kHz, which is above the audible range for humans. The IFX9201SGAUMA1 is not qualified for automotive applications. The device lacks built-in reverse polarity protection, requiring external circuitry to safeguard against incorrect power supply connections. 2  Option 2: 48-V, 3.5-A H BRIDGE MOTOR DRIVE  Texas Instruments Price: $1.79/unit Option 2 Link Wide Voltage Range (3.3V\u201348V)  - supports many motors. Provides up to 4A-5A peak current for controlling larger motors. Only controls one motor, so additional drivers are needed for multi-motor applications. Does not have a PWM module, meaning an external PWM control is required. Cannot be used for stepper motors or other complex motor types. 3  Option 3: IC MOTOR DRIVER UNIPOLAR 8SO POWERPAD  Texas Instruments Price: $2.13/unit Option 3 Link High Current Output (Up to 3.6A Peak) \u2013 Able to drive medium-power DC motors. Wide Voltage Range (6.5V\u201345V) \u2013 Supports a broad range of DC motors. At high currents, may require a heatsink or proper PCB design to avoid shorting or fire. Not compatible with I2C or SPI interface which is the communication protocol for this project. <p>Final Choice: Option 1 Rationale: The Infineon Technology IFX9201SGAUMA1 is my choice for controlling the DC motor in the spinning motor top project because of its precise speed control, low power consumption, and compact design. It also inculcates I2C protocol and low voltage as power.Moreover, it has a compact design and is very lightweight.</p> <ol> <li>Motor</li> </ol> No. Solution Pros Cons 1  Option 1: STANDARD MOTOR 9100 RPM 6V Adafruit Industries Price: $1.95/unit Option Link Datasheet Link Provides a stable 10W power supply, making it suitable for advanced microcontrollers like PIC. Small in size and can fit physically into small systems. Standard 5.5mm outer  DC plug ensures connections and compatibility with other electronic ports. Fixed at 5V, so we may need a Voltage regulator to get 5V. Cannot connect to USB Voltage regulators 2  Option 2: STANDARD MOTOR 12850 RPM 6V NMB Technologies Price: $5.22/unit Option 2 Link Produced by NMB Technologies, known for long lifespan in industry. Ideal for electronic cooling surfaces Is not compatible for control neither by PWM or Voltage  Will require detailed soldering instead of adapted connections 3  Option 3: STANDARD MOTOR 6960 RPM 12V Seeed Technologies Price: $5.22/unit Option 3 Link Compatible with 30V - 250V ADC Uses a groove connector easy to connect to Arduino Digikey discontinued its production Has a limited lifespan over other options <p>Final Choice: Option 1 Rationale: The Adafruit motor provides consistent torque, stable power supply of 10W, and reliable performance and it works excellent with PIC microcontrollers. Its compact design and efficiency make it ideal for installing it into small handheld devices like a motor based spinning top which is the main inspiration of our project.</p> <ol> <li>Voltage Regulator</li> </ol> No. Solution Pros Cons 1  Option 1: AP63203WU-7  Diodes Incorporated Price: $1.38/unit Option Link Datasheet Reduces heat dissipation and power loss Requires minimal additional components, simplifying circuit design and PCB layout. Fixed 3.3V Output \u2013 Not adjustable, which limits flexibility if different voltages are needed. 2  Option 2:  MIC5158YM-TR Price: $5.66/unit Option 2 Link More pins offer more GPIO functionality Can support wide range of voltage regulation Difficult to solder. Expensive than other voltage regulators. 3  Option 3:  MIC5156-3.3YM  Price: $4.02/unit Option 3 Link Supports High Current Loads for transistors and SMDS Ensures efficient operation with minimal voltage loss. Difficult to Solder Requires External Components <p>Final Choice: Option 1 Rationale: The AP63203Wu-7 offers 90% efficiency, 6.5V\u201340V input range, and 1A output. The stable 3.3V regulation with minimal heat dissipation is consistent in the IC. It has a  low component count, and built-in thermal and overcurrent protection for reliability.</p> <ol> <li>Power Supply</li> </ol> No. Solution Pros Cons 1  Option 1: 9V rechargeable 13000mAH battery  LCLEBM Price: $11.98/2 unit Option Link Ideal for portable electronics and has a small factor and 1200mAh capacity. Rechargeable for longer utility May not power sufficiently for high usage devices. Will require manual soldering 2  Option 2:  L6R06H-240  Tri-Mag LLC Price: $5.31/unit Option 2 Link Supports 90V-240V input with a excellent output voltage of 24V. Has maximum current output of 240 mA Will require wall mounting Not portable Cannot be soldered 3  Option 3: SWI3-5-N-MUB  Price: $4.92/unit Option 3 Link Supports high operating temp of 40 deg Celcius Has a high current output of 600 mA Difficult to Solder Does not support power voltage and is not compatible. <p>Final Choice: Option 2 Rationale: The L6R06H-240 delivers a regulated 24V output at up to 250mA (6W), making it ideal for powering low-power devices such as sensors, microcontrollers, or control circuits. Also with dimensions of 42.0 x 38.7 x 23.7 mm and a weight of approximately 90g, this adapter is easy to integrate into space-constrained setups.</p> <p>Role Description: In this project, the PIC18F47Q10 microcontroller is used to communicate with the IFX9201SGAUMA1 motor driver via the SPI protocol. The motor acts as an actuator, and the primary objective is to showcase how variations in temperature values can be used to control and reverse the motor\u2019s direction. The PCB also implements UART communication to receive and transmit data to and from a dedicated temperature sensor PCB. Based on the incoming temperature data, the microcontroller adjusts the motor's behavior accordingly\u2014modifying its direction in response to temperature fluctuations.</p> <p>Finalized Main Components:</p> Component Functionality PIC18F47Q10 Microcontroller used to communicate with the motor driver IFX9201SGAUMA1 SPI Motor driver to actuate the motor 9V motor Actuator of the project AP63203WU-7 3.3V Fixed Voltage Regulator <p>Selection Making Process: The components used in the Motor Driver PCB were selected after thorough evaluation of their datasheets, performance ratings, and practical experience gained during laboratory sessions throughout the semester. The PIC18F47Q10 microcontroller, SPI motor driver, and voltage regulator were specifically chosen for their proven reliability, compatibility, and familiarity\u2014having been used effectively in previous coursework and lab experiments. Their selection reflects both functional suitability and hands-on experience from class projects</p> <p>Requirements: I2C Communication Protocol to be implemented for communication between the PIC18F27Q10 microcontroller and the Temperature Sensor. SPI Communication will be used to establish communication between the PIC18F47Q10 microcontroller and the IFX9201SGAUMA1 motor driver.</p> <p>Microcontroller Considerations:</p> PIC INFORMATION ANSWER Model PIC18F47Q10  Product Page URL Product Page Link Datasheet URL Datasheet Link Vendor Link Digikey Link Code Examples External Resources URL Mouser link Unit Cost $1.49 Absolute Maximum Current On VSS pin (Ground): \u201340\u00b0C \u2264 TA \u2264 +85\u00b0C: 350 mA +85\u00b0C \\&lt; TA \u2264 +125\u00b0C: 120 mA On VDD pin (for 40-pin devices like  PIC18F47Q10): \u201340\u00b0C \u2264 TA \u2264 +85\u00b0C: 350 mA +85\u00b0C \\&lt; TA \u2264 +125\u00b0C: 120 mA Supply Voltage Range 1.8 V - 5.5 V Maximum GPIO current per pin On any standard I/O pin: \u00b150 mA Supports External Interrupts Yes Required Programming hardware costs $0.00 Works with MPLABx Yes Works with Microchip Code Configurator Yes <p>Pins Table Pins Table</p> Module # Available Needed Associated Pins (or * for any) GPIO 36 17 Any GPIO Pin ADC 35 0 Any ADC Pin UART 4 (PPS remappable) 2 Any UART Pin SPI 2 SPI modules (4 pins per module all PPS remappable) 4 Any SPI Pin I2C 2 I2C modules (2 pins per module all PPS remappable) 0 Any I2C Pin PWM 4 PWM outputs (PPS remappable) 0 Any PWM Pin ICSP 2 pins(ICSPDAT, ICSPCLK) 2 Any GPIO Pin <p>*Screenshots of MCC using the selected PIC</p> <p></p> <p>POWER BUDGET:</p>"},{"location":"Resources/","title":"Resources","text":""},{"location":"Resources/#resources-page","title":"Resources Page","text":"<p>The following Resources page contains links and files for context of this project. Motor_classics.zip</p>"},{"location":"Schematic/","title":"Schematic","text":""},{"location":"Schematic/#schematic-design-of-motor-driver-subsystem","title":"Schematic design of Motor driver Subsystem","text":"<p>EGR314 Aadish Lele Schematic </p> <p>EGR314 Motor Driver Subsystem PCB: </p> <p>PCB Top View: </p> <p>PCB Bottom View: </p> <p>Important Links:  </p> <p>EGR314 Motor Driver Subsystem PDF file SCHEMATIC.pdf</p> <p>EGR314 PCB Gerber file zip: PCB_gerber.zip</p> <p>Gerber files Gerber.zip</p>"},{"location":"Schematic/#functional-analysis-of-the-schematic-meeting-user-needs-and-product-specs","title":"Functional Analysis of the Schematic: Meeting User Needs and Product Specs","text":"<p>The schematic is a clear-cut hardware design created in Altium Designer, consisting of several neatly labeled sections. It integrates power regulation, SPI motor control, UART comms, and programming/debugging functionality to achieve the main goal: demonstrating how temperature change can dynamically control motor rotation within a modular, STEM-themed display.  </p> <p>Neatly Sectionalized Structure for Modularity and Debugging  The schematic is divided into headed blocks capturing functional areas: - Switching Voltage Regulator - Motor Driver - PIC18F47Q10 Microcontroller - Ribbon UART &amp; Power Connectors - Snap Programmer Header - Test Points - Debug LEDs</p> <p>The compartmentalization of the schematic makes it easy to understand, modify, and debug\u2014key product specifications in tutorial and interactive systems. Net labels like CSN, SCK, SI, and SO also make tracing communication lines from section to section easy.  </p> <p>Motor Driver Control via SPI \u2013 Real-Time Actuation  The IFX9201SGAUMA1 motor driver talks to the PIC18F47Q10 using four SPI signals: - CSN (Chip Select) - SCK (Clock) - SI (Serial Input) - SO (Serial Output)  - OUT1 and OUT2 motor outputs are connected to test points for easy probing or direct connection to motors. The outputs are driven from temperature inputs, addressing the requirement of actuating from sensor-driven information\u2014a critical user need in control systems and embedded engineering.  </p> <p>UART Data Reception \u2013 Sensor PCB Integration There are two ribbon connectors (CONN_IN and CONN_OUT) for UART data on the schematic: - CONN_IN: accepts RX data from an external temperature sensor PCB. - CONN_OUT: transmits TX data, maybe as status or feedback.  </p> <p>The UART interface addresses the requirement for inter-device communication and sensor integration modularity, which is crucial for scalable and pedagogically significant hardware demonstrations.  </p> <p>Switching Regulator-Based Power Management:     A specialized AP62300WU-7 switching voltage regulator controls input voltage to a reliable 5V supply used throughout the circuit. This delivers: - Power efficiency - Smooth operation of the PIC and motor driver - Protection from undervoltage conditions - Smooth power delivery allows for extended use in display applications without overheating or noise interference.</p> <p>Onboard Programming and Debugging:  The schematic includes: - An 8-pin Snap Programmer header for programming code into the PIC18F47Q10. - A pull-up resistor and decoupling cap MCLR circuit for proper reset operation. - Test points on key SPI and ICSP lines. - Debugging LEDs (LED-PIC and LED-Power Debug) tied to GPIOs for providing instant visual feedback of device status.  </p> <p>All the above cater to the user's need for ease of development, testability, and debuggability, which are critical in academic and prototyping environments.</p> <p>Educational Demonstrability and Interactivity  By allowing users to: - Watch LED indicators, - Connect motors directly via test points, debugging is simplified, and activities can be directly understood. - Send and receive UART messages, - And display behavior as a reaction to temperature, the schematic satisfies product requirements for a STEM-themed, interactive physical system that clearly and effectively demonstrates embedded concepts.  </p> <p>Conclusion  The functionality of this schematic is carefully crafted to meet technical as well as educational purposes. It demonstrates good system modularity, effective real-time control, standard communication protocols and clear visual feedback mechanisms. All of which are directly in accordance with the needs of students, teachers, and users viewing the project as part of an internet-enabled, interactive STEM exhibition. The design is sound and pedagogically effective, evidencing good engineering practice and thoughtful system integration.  </p>"},{"location":"Schematic/#team-design-and-decision-making-process","title":"Team Design and Decision making process","text":"<p>Our team designed this final design of the PCB after many iterations of switching component libraries, updating footprints and ordering them in 2 batches. The PCB is designed on 100 mm X 100 mm board size and is a 2 layer PCB with VIAs. In this schematic and pcb we decied to use the same voltage regulator for easier functionality to integrate both of the PCBs to get the sensor actuator system functioning correctly.  </p>"},{"location":"Schematic/#version-20-improvements","title":"Version 2.0 Improvements","text":"<p>Proposed Improvements for Version 2 of the Schematic and PCB If I were to create a Version 2 of the schematic and PCB, I would focus on improving both the functionality and efficiency of the design, with an emphasis on readability, manufacturability, and professional presentation. The following enhancements would be implemented:  </p> <p>Improved Use of Netlabels for Clarity While the current design does include some netlabels, Version 2 would fully standardize their use across all signal and power lines. This would:   - Reduce visual clutter from long, overlapping wires.   - Make the schematic cleaner and easier to read.   - Improve traceability between different schematic blocks.   - Using consistent and descriptive netlabel naming conventions (e.g., UART_TX, SPI_CLK, PWM_OUT) would further simplify debugging and documentation.  </p> <p>Simplified and More Intuitive Wiring To enhance circuit readability, I would reorganize component placement to minimize crossovers and tightly group related components. This would:   - Help new users or reviewers quickly understand signal flow.   - Reduce confusion when editing or expanding the schematic later.   - Allow easier schematic-to-PCB correlation during layout.  </p> <p>Smaller PCB Footprint for Cost Efficiency For Version 2 of the PCB, I would optimize the board layout to reduce the physical size of the PCB without compromising performance. This includes:   - Compact placement of passive components.   - More efficient routing using internal layers if needed.   - Reconsidering connector and test point placement to save space. A smaller board results in:   - Lower fabrication costs (especially in volume).   - Shorter manufacturing time.   - Potentially better mechanical integration into enclosures or displays.  </p> <p>Improved Silkscreen and Labeling Clear component labels and functional annotations on the silkscreen layer would be added to:   - Help identify test points, headers, and polarity.   - Assist with manual assembly or inspection.   - Improve the user experience in educational or demonstration settings.  </p> <p>Potential Expansion Headers: To future-proof the design, I may include additional headers or expansion points in Version 2 for:   - Extra UART/SPI/I2C peripherals.   - Future sensor inputs.   - Power monitoring or wireless modules.  </p> <p>Summary In summary, Version 2 of the schematic and PCB would emphasize: - Better organization through full netlabel use. - Cleaner schematic layout with simplified wiring. - Smaller, cost-efficient PCB size. - Enhanced usability with clear labeling and expansion options. These improvements would lead to a more professional, maintainable, and scalable design while continuing to support the project's STEM and educational goals.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}